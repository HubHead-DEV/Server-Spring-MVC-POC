// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.nrx.poc.web;

import com.nrx.poc.domain.Attribute;
import com.nrx.poc.domain.AttributeValue;
import com.nrx.poc.domain.Location;
import com.nrx.poc.repository.AttributeRepository;
import com.nrx.poc.repository.AttributeValueRepository;
import com.nrx.poc.repository.LocationRepository;
import com.nrx.poc.web.ApplicationConversionServiceFactoryBean;
import java.math.BigInteger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Configurable;
import org.springframework.core.convert.converter.Converter;
import org.springframework.format.FormatterRegistry;

privileged aspect ApplicationConversionServiceFactoryBean_Roo_ConversionService {
    
    declare @type: ApplicationConversionServiceFactoryBean: @Configurable;
    
    @Autowired
    AttributeRepository ApplicationConversionServiceFactoryBean.attributeRepository;
    
    @Autowired
    AttributeValueRepository ApplicationConversionServiceFactoryBean.attributeValueRepository;
    
    @Autowired
    LocationRepository ApplicationConversionServiceFactoryBean.locationRepository;
    
    public Converter<Attribute, String> ApplicationConversionServiceFactoryBean.getAttributeToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<com.nrx.poc.domain.Attribute, java.lang.String>() {
            public String convert(Attribute attribute) {
                return new StringBuilder().append(attribute.getName()).toString();
            }
        };
    }
    
    public Converter<BigInteger, Attribute> ApplicationConversionServiceFactoryBean.getIdToAttributeConverter() {
        return new org.springframework.core.convert.converter.Converter<java.math.BigInteger, com.nrx.poc.domain.Attribute>() {
            public com.nrx.poc.domain.Attribute convert(java.math.BigInteger id) {
                return attributeRepository.findOne(id);
            }
        };
    }
    
    public Converter<String, Attribute> ApplicationConversionServiceFactoryBean.getStringToAttributeConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, com.nrx.poc.domain.Attribute>() {
            public com.nrx.poc.domain.Attribute convert(String id) {
                return getObject().convert(getObject().convert(id, BigInteger.class), Attribute.class);
            }
        };
    }
    
    public Converter<AttributeValue, String> ApplicationConversionServiceFactoryBean.getAttributeValueToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<com.nrx.poc.domain.AttributeValue, java.lang.String>() {
            public String convert(AttributeValue attributeValue) {
                return new StringBuilder().append(attributeValue.getAttValue()).toString();
            }
        };
    }
    
    public Converter<BigInteger, AttributeValue> ApplicationConversionServiceFactoryBean.getIdToAttributeValueConverter() {
        return new org.springframework.core.convert.converter.Converter<java.math.BigInteger, com.nrx.poc.domain.AttributeValue>() {
            public com.nrx.poc.domain.AttributeValue convert(java.math.BigInteger id) {
                return attributeValueRepository.findOne(id);
            }
        };
    }
    
    public Converter<String, AttributeValue> ApplicationConversionServiceFactoryBean.getStringToAttributeValueConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, com.nrx.poc.domain.AttributeValue>() {
            public com.nrx.poc.domain.AttributeValue convert(String id) {
                return getObject().convert(getObject().convert(id, BigInteger.class), AttributeValue.class);
            }
        };
    }
    
    public Converter<Location, String> ApplicationConversionServiceFactoryBean.getLocationToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<com.nrx.poc.domain.Location, java.lang.String>() {
            public String convert(Location location) {
                return new StringBuilder().append(location.getErpCode()).append(' ').append(location.getName()).append(' ').append(location.getTag()).append(' ').append(location.getSerialNumber()).toString();
            }
        };
    }
    
    public Converter<BigInteger, Location> ApplicationConversionServiceFactoryBean.getIdToLocationConverter() {
        return new org.springframework.core.convert.converter.Converter<java.math.BigInteger, com.nrx.poc.domain.Location>() {
            public com.nrx.poc.domain.Location convert(java.math.BigInteger id) {
                return locationRepository.findOne(id);
            }
        };
    }
    
    public Converter<String, Location> ApplicationConversionServiceFactoryBean.getStringToLocationConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, com.nrx.poc.domain.Location>() {
            public com.nrx.poc.domain.Location convert(String id) {
                return getObject().convert(getObject().convert(id, BigInteger.class), Location.class);
            }
        };
    }
    
    public void ApplicationConversionServiceFactoryBean.installLabelConverters(FormatterRegistry registry) {
        registry.addConverter(getAttributeToStringConverter());
        registry.addConverter(getIdToAttributeConverter());
        registry.addConverter(getStringToAttributeConverter());
        registry.addConverter(getAttributeValueToStringConverter());
        registry.addConverter(getIdToAttributeValueConverter());
        registry.addConverter(getStringToAttributeValueConverter());
        registry.addConverter(getLocationToStringConverter());
        registry.addConverter(getIdToLocationConverter());
        registry.addConverter(getStringToLocationConverter());
    }
    
    public void ApplicationConversionServiceFactoryBean.afterPropertiesSet() {
        super.afterPropertiesSet();
        installLabelConverters(getObject());
    }
    
}
