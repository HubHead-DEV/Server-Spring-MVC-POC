// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.nrx.poc.domain;

import com.nrx.poc.domain.Location;
import com.nrx.poc.domain.LocationDataOnDemand;
import com.nrx.poc.repository.LocationRepository;
import java.math.BigInteger;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect LocationDataOnDemand_Roo_DataOnDemand {
    
    declare @type: LocationDataOnDemand: @Component;
    
    private Random LocationDataOnDemand.rnd = new SecureRandom();
    
    private List<Location> LocationDataOnDemand.data;
    
    @Autowired
    LocationRepository LocationDataOnDemand.locationRepository;
    
    public Location LocationDataOnDemand.getNewTransientLocation(int index) {
        Location obj = new Location();
        setErpCode(obj, index);
        setName(obj, index);
        setPlant(obj, index);
        setSerialNumber(obj, index);
        setTag(obj, index);
        return obj;
    }
    
    public void LocationDataOnDemand.setErpCode(Location obj, int index) {
        String erpCode = "erpCode_" + index;
        obj.setErpCode(erpCode);
    }
    
    public void LocationDataOnDemand.setName(Location obj, int index) {
        String name = "name_" + index;
        if (name.length() > 256) {
            name = name.substring(0, 256);
        }
        obj.setName(name);
    }
    
    public void LocationDataOnDemand.setPlant(Location obj, int index) {
        String plant = "plant_" + index;
        obj.setPlant(plant);
    }
    
    public void LocationDataOnDemand.setSerialNumber(Location obj, int index) {
        Integer serialNumber = new Integer(index);
        obj.setSerialNumber(serialNumber);
    }
    
    public void LocationDataOnDemand.setTag(Location obj, int index) {
        String tag = "tag_" + index;
        obj.setTag(tag);
    }
    
    public Location LocationDataOnDemand.getSpecificLocation(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Location obj = data.get(index);
        BigInteger id = obj.getId();
        return locationRepository.findOne(id);
    }
    
    public Location LocationDataOnDemand.getRandomLocation() {
        init();
        Location obj = data.get(rnd.nextInt(data.size()));
        BigInteger id = obj.getId();
        return locationRepository.findOne(id);
    }
    
    public boolean LocationDataOnDemand.modifyLocation(Location obj) {
        return false;
    }
    
    public void LocationDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = locationRepository.findAll(new org.springframework.data.domain.PageRequest(from / to, to)).getContent();
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Location' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Location>();
        for (int i = 0; i < 10; i++) {
            Location obj = getNewTransientLocation(i);
            try {
                locationRepository.save(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            data.add(obj);
        }
    }
    
}
